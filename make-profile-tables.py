###############################################################################
#
# Script for generating profiling information tables for C modules being
# profiled by profiler-main.c.
#
# It takes one command-line parameter: the name of the module, e.g. "xyz".
# It reads through xyz-profile.c, pulls out function names having certain
# initial substrings, and builds a file xyz-profile-tables.c which should
# be linked against xyz-profile.c and profiler-main.c.
#
# See the makefile for typical usage. See also profiler-main.c.
#
# (C) 2007 William Hart and David Harvey
#
###############################################################################


import sys
import re


if len(sys.argv) != 2:
   raise ValueError, "no file specified"
   
module = sys.argv[1]


############ process input file

cfilename = module + "-profile.c"
cfile = open(cfilename)

prof2dDriver_re = re.compile("void prof2dDriver_(.*)\(.*")
prof2dDriverString_re = re.compile("char\* prof2dDriverString_(.*)\(.*")
prof2dDriverDefaultParams_re = re.compile("char\* prof2dDriverDefaultParams_(.*)\(.*")

prof2d_re = [prof2dDriver_re, prof2dDriverString_re, prof2dDriverDefaultParams_re]

# dictionary from profile name to a tuple of bools, indicating which
# functions are defined for each target
prof2d_data = {}

for line in cfile:
   for i in range(len(prof2d_re)):
      m = prof2d_re[i].match(line)
      if m is not None:
         name = m.group(1)
         if name not in prof2d_data:
            prof2d_data[name] = [False] * len(prof2d_re)
         else:
            if prof2d_data[name][i]:
               raise ValueError, "duplicate target \"%s\"" % name
         prof2d_data[name][i] = True


############ generate output file

tfilename = module + "-profile-tables.c"
tfile = open(tfilename, "w")

tfile.write(
   "/* ===================================================================\n"
   "\n"
   "   " + tfilename + "\n"
   "\n"
   "   This file was AUTOMATICALLY GENERATED by make-profile-tables.py.\n"
   "   DO NOT EDIT IT -- your changes will go the way of all LOST SOCKS.\n"
   "\n"
   "=================================================================== */\n"
   "\n"
)

tfile.write("#include <stdlib.h>\n")
tfile.write("#include \"profiler-main.h\"\n")
tfile.write("\n")

tfile.write("char* prof_module_name = \"" + module + "\";\n\n")

tfile.write("int prof2d_target_count = %s;\n\n" % len(prof2d_data))

for (name, flags) in prof2d_data.iteritems():
   if flags[0]:
      tfile.write("extern void prof2dDriver_%s(char* params);\n" % name)
   if flags[1]:
      tfile.write("extern char* prof2dDriverString_%s(char* params);\n" % name)
   if flags[2]:
      tfile.write("extern char* prof2dDriverDefaultParams_%s();\n" % name)
tfile.write("\n")

tfile.write("char* prof2d_target_name[] = {\n")
for (name, flags) in prof2d_data.iteritems():
   tfile.write("   \"%s\",\n" % name)
tfile.write("};\n\n")


tfile.write("prof2d_Driver_t prof2d_Driver_list[] = {\n")
for (name, flags) in prof2d_data.iteritems():
   if flags[0]:
      tfile.write("   prof2dDriver_%s,\n" % name)
   else:
      tfile.write("   NULL,\n")
tfile.write("};\n\n")


tfile.write("prof2d_DriverString_t prof2d_DriverString_list[] = {\n")
for (name, flags) in prof2d_data.iteritems():
   if flags[1]:
      tfile.write("   prof2dDriverString_%s,\n" % name)
   else:
      tfile.write("   NULL,\n")
tfile.write("};\n\n")


tfile.write("prof2d_DriverDefaultParams_t prof2d_DriverDefaultParams_list[] = {\n")
for (name, flags) in prof2d_data.iteritems():
   if flags[2]:
      tfile.write("   prof2dDriverDefaultParams_%s,\n" % name)
   else:
      tfile.write("   NULL,\n")
tfile.write("};\n\n")


########### end of file
